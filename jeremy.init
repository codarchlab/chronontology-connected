#!/bin/sh
### BEGIN INIT INFO
# Provides:          jeremy
# Required-Start:    $network $remote_fs $named
# Required-Stop:     $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts jeremy
# Description:       Starts jeremy using start-stop-daemon
### END INIT INFO
# Author: <sebastian.cuy@dainst.de>

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=jeremy
DESC="Jeremy Server"

if [ `id -u` -ne 0 ]; then
	echo "You need root privileges to run this script"
	exit 1
fi

. /lib/lsb/init-functions

# Run Jeremy as this user ID and group ID
JEREMY_USER=jeremy
JEREMY_GROUP=jeremy

# Directory where the Jeremy binary distribution resides
JEREMY_HOME=/usr/local/$NAME

# Jeremy PID file directory
PID_DIR="/var/run/jeremy"

# Define other required variables
PID_FILE="$PID_DIR/$NAME.pid"
JAR_FILE="$JEREMY_HOME/jeremy.jar"

checkJava() {
	if [ -x "$JAVA_HOME/bin/java" ]; then
		JAVA="$JAVA_HOME/bin/java"
	else
		JAVA=`which java`
	fi

	if [ ! -x "$JAVA" ]; then
		echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
		exit 1
	fi
}

case "$1" in
  start)
	checkJava

	log_daemon_msg "Starting $DESC"

	pid=`pidofproc -p $PID_FILE jeremy`
	if [ -n "$pid" ] ; then
		log_begin_msg "Already running."
		log_end_msg 0
		exit 0
	fi

	# Ensure that the PID_DIR exists (it is cleaned at OS startup time)
	if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
		mkdir -p "$PID_DIR" && chown "$JEREMY_USER":"$JEREMY_GROUP" "$PID_DIR"
	fi
	if [ -n "$PID_FILE" ] && [ ! -e "$PID_FILE" ]; then
		touch "$PID_FILE" && chown "$JEREMY_USER":"$JEREMY_GROUP" "$PID_FILE"
	fi

	# Start Daemon
	start-stop-daemon -S -b -m -u "$JEREMY_USER" -c "$JEREMY_USER" -d "$JEREMY_HOME" -p "$PID_FILE" -x "$JAVA" -- -jar "$JAR_FILE"
	return=$?
	log_end_msg $return
	exit $return
	;;
  stop)
	log_daemon_msg "Stopping $DESC"

	if [ -f "$PID_FILE" ]; then
		start-stop-daemon --stop --pidfile "$PID_FILE" \
			--user "$JEREMY_USER" \
			--quiet \
			--retry forever/TERM/20 > /dev/null
		if [ $? -eq 1 ]; then
			log_progress_msg "$DESC is not running but pid file exists, cleaning up"
		elif [ $? -eq 3 ]; then
			PID="`cat $PID_FILE`"
			log_failure_msg "Failed to stop $DESC (pid $PID)"
			exit 1
		fi
		rm -f "$PID_FILE"
	else
		log_progress_msg "(not running)"
	fi
	log_end_msg 0
	;;
  status)
	status_of_proc -p $PID_FILE jeremy jeremy && exit 0 || exit $?
	;;
  restart|force-reload)
	if [ -f "$PID_FILE" ]; then
		$0 stop
		sleep 1
	fi
	$0 start
	;;
  *)
	log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
	exit 1
	;;
esac

exit 0
