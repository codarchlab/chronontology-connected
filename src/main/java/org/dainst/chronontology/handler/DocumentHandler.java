package org.dainst.chronontology.handler;import com.fasterxml.jackson.databind.JsonNode;import org.apache.commons.lang3.RandomStringUtils;import org.dainst.chronontology.handler.dispatch.Dispatcher;import org.dainst.chronontology.handler.model.Document;import org.dainst.chronontology.handler.model.RightsValidator;import spark.Request;import spark.Response;import java.io.IOException;import static org.dainst.chronontology.Constants.HTTP_BAD_REQUEST;import static org.dainst.chronontology.Constants.HTTP_FORBIDDEN;import static org.dainst.chronontology.util.JsonUtils.json;/** * @author Daniel de Oliveira */public abstract class DocumentHandler implements Handler {    private static final String ID = ":id";    public DocumentHandler(Dispatcher dispatcher, RightsValidator rightsValidator) {        this.dispatcher = dispatcher;        this.rightsValidator= rightsValidator;    }    protected final Dispatcher dispatcher;    protected final RightsValidator rightsValidator;    protected final Document makeDocumentModel(            Request req,            Response res,            boolean createId) {        JsonNode n= json(req.body());        if (n==null) {            res.status(HTTP_BAD_REQUEST);            return null;        }        String resourceId= null;        String resourceType= null;        if (createId) {            resourceId= determineFreeId(req);            resourceType= req.pathInfo().replaceAll("/","");        } else {            resourceId= req.pathInfo().replaceFirst("\\/.*\\/","");            resourceType= req.pathInfo().substring(0,req.pathInfo().lastIndexOf("/")).replaceAll("/","");        }        Document dm = new Document(                resourceId, resourceType,json(req.body()), req.attribute("user"));        if (!userAccessLevelSufficient(req,dm, RightsValidator.Operation.EDIT)) {            res.status(HTTP_FORBIDDEN);            return null;        }        return dm;    }    protected final boolean userAccessLevelSufficient(Request req, Document dm, RightsValidator.Operation operation) {        if (dm.getDataset()!=null &&                !rightsValidator.hasPermission(req.attribute("user"),                        dm.getDataset(), operation)) {            return false;        }        return true;    }    protected String type(Request req) {        String tmp = req.pathInfo();        if (tmp.startsWith("/data/")) tmp = tmp.substring(6);        if (req.params(ID) != null) tmp = tmp.replace(req.params(ID),"");        return tmp;    }    protected String simpleId(Request req) {        return req.params(ID);    }    private static String generateId() {        return RandomStringUtils.randomAlphanumeric(12);    }    private String determineFreeId(Request req) {        String id;        JsonNode existingDoc= null;        do {            id= generateId();            existingDoc = dispatcher.dispatchGet(req.pathInfo(),id);        } while (existingDoc!=null);        return id;    }    @Override    public abstract Object handle(Request req, Response res) throws IOException;}